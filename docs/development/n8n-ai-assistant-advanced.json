{
  "name": "STUDIO360 AI Assistant (Advanced)",
  "nodes": [
    {
      "parameters": {
        "path": "ai-assistant",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "Webhook",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [ 320, 300 ]
    },
    {
      "parameters": {
        "language": "JavaScript",
  "jsCode": "const body = $json;\nconst message = (body.message || '').toString();\nconst m = message.toLowerCase();\nlet intent = 'general';\nif (/categor/.test(m)) intent = 'categorize';\nelse if (/(report|summary|monthly)/.test(m)) intent = 'report';\nelse if (/(upload|receipt|invoice|excel|csv|file)/.test(m)) intent = 'upload';\nelse if (/(help|what\\s+can\\s+you\\s+do|ai\\s*bookkeep)/.test(m)) intent = 'help';\n\nconst systemPrompt = 'You are the STUDIO360 AI Bookkeeper. Be concise and task-focused. If user asks for bookkeeping, guide to upload, categorize, or generate reports.';\nreturn [{ json: { ...body, intent, systemPrompt } }];"
      },
      "id": "Router",
      "name": "Router",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [ 560, 300 ]
    },
    {
      "parameters": {
        "language": "JavaScript",
        "jsCode": "const s = $json;\nreturn [{ json: { reply: 'To categorize, upload your receipts or a CSV/XLSX in Upload Process, then say “categorize recent transactions”.', statsDelta: { processed: 1 } } }];"
      },
      "id": "Categorize Reply",
      "name": "Categorize Reply",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [ 880, 180 ]
    },
    {
      "parameters": {
        "language": "JavaScript",
        "jsCode": "return [{ json: { reply: 'I can generate a monthly summary once your data is uploaded. Ask: “generate monthly report for August”.', statsDelta: { processed: 1 } } }];"
      },
      "id": "Report Reply",
      "name": "Report Reply",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [ 880, 300 ]
    },
    {
      "parameters": {
        "language": "JavaScript",
        "jsCode": "return [{ json: { reply: 'Use the Upload Process to send receipts (PDF/images) or Excel/CSV; I’ll extract totals, dates, and line items automatically.', statsDelta: { processed: 1 } } }];"
      },
      "id": "Upload Reply",
      "name": "Upload Reply",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [ 880, 420 ]
    },
    {
      "parameters": {
        "language": "JavaScript",
        "jsCode": "return [{ json: { reply: 'I can extract data from receipts, categorize transactions, and generate quick reports. Try: “categorize recent transactions” or “generate monthly report for August”.', statsDelta: { processed: 1 } } }];"
      },
      "id": "Help Reply",
      "name": "Help Reply",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [ 880, 540 ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "requestMethod": "POST",
        "url": "={{$env.OPENROUTER_BASE || 'https://openrouter.ai/api/v1'}}/chat/completions",
        "jsonParameters": true,
        "options": {
          "timeout": 30000
        },
        "sendBody": true,
        "bodyParametersJson": "={{ JSON.stringify({ model: $env.OPENROUTER_MODEL || 'openai/gpt-4o-mini', messages: [ { role: 'system', content: $json.systemPrompt }, ...(($json.history || []).map(h => ({ role: h.role, content: h.content }))), { role: 'user', content: $json.message } ], temperature: 0.3, max_tokens: 400 }) }}",
        "headerParametersJson": "={{ JSON.stringify({ 'Authorization': 'Bearer ' + $env.OPENROUTER_API_KEY, 'Content-Type': 'application/json' }) }}"
      },
      "id": "LLM (OpenRouter)",
      "name": "LLM (OpenRouter)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [ 880, 720 ]
    },
    {
      "parameters": {
        "language": "JavaScript",
        "jsCode": "// Extract assistant text from OpenRouter response\nconst data = $json;\nconst text = data.choices?.[0]?.message?.content || 'Okay.';\nreturn [{ json: { reply: text, statsDelta: { processed: 1 } } }];"
      },
      "id": "Format LLM Reply",
      "name": "Format LLM Reply",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [ 1120, 720 ]
    }
  ],
  "connections": {
    "Webhook": { "main": [[{ "node": "Router", "type": "main", "index": 0 }]] },
    "Router": { "main": [
      [ { "node": "Categorize Reply", "type": "main", "index": 0 } ],
      [ { "node": "Report Reply", "type": "main", "index": 0 } ],
      [ { "node": "Upload Reply", "type": "main", "index": 0 } ],
      [ { "node": "Help Reply", "type": "main", "index": 0 } ],
      [ { "node": "LLM (OpenRouter)", "type": "main", "index": 0 } ]
    ] },
    "LLM (OpenRouter)": { "main": [[{ "node": "Format LLM Reply", "type": "main", "index": 0 }]] }
  }
}
